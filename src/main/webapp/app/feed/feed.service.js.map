{"version":3,"sources":["app/feed/feed.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAaA;gBACI,qBAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBAGvB,qBAAgB,GAAG,IAAI,iBAAO,EAAY,CAAC;oBAEnD,yBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;gBAJ5D,CAAC;gBAMD,mCAAa,GAAb;oBAAA,iBAOC;oBANG,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC;yBAC9E,KAAK,CAAC,UAAA,KAAK;wBACR,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;oBACP,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAGD,oCAAc,GAAd,UAAe,QAAkB;oBAE7B,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;oBAChE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;oBACrD,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAEpC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,OAAO,CAAC;yBAC/C,KAAK,CAAC,UAAA,KAAK;wBACR,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;gBAEX,CAAC;gBAED,8BAAQ,GAAR,UAAS,QAAkB;oBACvB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAChD,CAAC;gBAED,gCAAU,GAAV,UAAW,CAAM;oBACb,MAAM,CAAC,IAAI,oBAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;gBAClD,CAAC;gBAED,mCAAa,GAAb,UAAc,QAAkB;oBAC5B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzC,CAAC;gBA3CL;oBAAC,iBAAU,EAAE;;+BAAA;gBA6Cb,kBAAC;YAAD,CA5CA,AA4CC,IAAA;YA5CD,qCA4CC,CAAA","file":"app/feed/feed.service.js","sourcesContent":["/**\r\n * Created by Mehdi on 9/1/2016.\r\n */\r\nimport {Injectable} from \"@angular/core\";\r\n\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\r\nimport 'rxjs/Rx';\r\nimport {FeedItem} from \"./feed-item\";\r\n\r\nimport {Subject} from \"rxjs/Subject\";\r\n\r\n@Injectable()\r\nexport class FeedService {\r\n    constructor(private _http: Http) {\r\n    }\r\n\r\n    private addedFeedsSource = new Subject<FeedItem>();\r\n\r\n    addedFeedsAnnounced$ = this.addedFeedsSource.asObservable();\r\n\r\n    loadFeedItems(): Observable<FeedItem[]> {\r\n        let feeds$ = this._http.get('./api/feeds').map(response => this.mapFeeds(response))\r\n            .catch(error => {\r\n                console.error(error);\r\n                return Observable.throw(error.json());\r\n            });\r\n        return feeds$;\r\n    }\r\n\r\n\r\n    createFeedItem(feedItem: FeedItem): Observable<FeedItem> {\r\n\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        let options = new RequestOptions({headers: headers});\r\n        let body = JSON.stringify(feedItem);\r\n\r\n        return this._http.post('./api/feeds', body, options)\r\n            .catch(error => {\r\n                console.error(error);\r\n                return Observable.throw(error.json());\r\n            });\r\n\r\n    }\r\n\r\n    mapFeeds(response: Response): FeedItem[] {\r\n        return response.json().map(this.toFeedItem);\r\n    }\r\n\r\n    toFeedItem(r: any): FeedItem {\r\n        return new FeedItem(r.publishDate, r.content);\r\n    }\r\n\r\n    fireItemAdded(feedItem: FeedItem) {\r\n        this.addedFeedsSource.next(feedItem);\r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}